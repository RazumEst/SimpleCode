using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Функции_и_методы
{
    // Никакая функция не может существовать без класса.
    //Функции, принадлежащие к классам, называют Методами. Поэтому это одно и тоже.
    internal class Program
    {
       //Модификатор тип возвращаемого значения(результат работы метода)
       //название метода(придумать самим)параметры(тип данных и название параметра)
       //метод вызывается, что-то делает, а потом возвращает результат своего действия 
       //Метод нужно: создать, объявить и использовать.
       //Метод может не возвращать какие-то данные. Он может выполнить внутри себя 
       //определенную логику, но не вернуть результат. Пример: класс Console метод WriteLine
       //он что-то делает внутри себя, но не возвращает данные.Тип возвращаемого значение
       //у него void. 

        //static void PrintLine() тут нет параметров, поэтому пустые скобки. 
        //{
        //Console.WriteLine("Метод PrintLine был вызван!"); 
        //}
        //этот метод просто выведет данные на консоль. Но не принимает никакие параметры,
        //и не возвращае данные. 
        //Также, метод может не принимать параметры, но возвращать данные. Пример:
        //Метод Random, куда мы не передаем параметры, но он возвращает в кач-ве результата
        //своей работы число. 
        static int Sum(int a, int b)
        {
            int result = a + b;
            return result;
            //можно написать короче: return = a + b;
            //внутри метода можно обозначать параметры не так, как вне его.
        }
         
        static void PrintSumm(int result)//метод с параметрами, но без возвращения результата.
        {
            Console.WriteLine("Результатом сложения будет " + result);
        }
        static void Main(string[] args)
        {
            int a, b, c;
            a = int.Parse(Console.ReadLine());
            b = int.Parse(Console.ReadLine());

           c = Sum(a, b);//вызвали метод, передали ему параметр.
       
            PrintSumm(c);
                Console.WriteLine("=====================");

            //допустим, нам нужно, чтобы этот код выполнялся множество раз.
            //каждый раз вручную переписывать его неудобно, плюс могут появляться баги.
            //если нужно менять логику программы, например, сложение заменить умножением.
            // Использование методов помогает нам избавиться от дублирования кода.
            //нужный код выносится в специальное место - метод, точнее в его тело.
            //Каждый раз, когда нам понадобится этот код, то мы будем его просто вызывать
            //а не писать каждый раз заново. И когда нам нужно изменить его реализацию,
            //то делаем это внутри метода. 
        }
    }
}
