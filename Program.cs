using System;
using System.Linq;

namespace Массивы_на_самом_деле
{
    internal class Program
    {
        //Найти наименьший элемент массива
        static void Main(string[] args)
        {
            int[] myArray = { 10, 56, 895, 12, 4, 65, 33 };
            //int result = myArray.Min(); //в переменную result заключим максимальный 
            // или минимальный элемент. Метод Max/Min делают то, что до этого
            //я писала "руками". Но стабильно.
            //методы Max, Min - некие апгрейды, расширения, которые м.б. записаны 
            //в других пространствах имен. 
            //поскольку это расширение, и лежит оно не в самом классе Array,
            //обязательно нужно использовать System.Linq.
            Console.WriteLine(myArray.Min());//можно опустить код с переменной 
            //result.
            // еще есть метод Sum() - возвращает сумму всех элементов массива.

            Console.WriteLine(myArray.Where(i => i % 2 == 0).Sum());//метод where позволяет заключить в себя 
            //какое-то условие для поиска. Принимает в себя в качестве параметра
            //делегат, который позволяет указать условие для поиска.
            //в качесве параметра мы указали лямбда-выражение. После получения четных
            //чисел, мы их суммируем. 

            Console.WriteLine(myArray.Where(i => i % 2 != 0).Min());
            //наименьшее четное число 

            int[] myCat = { 11, 36, 36, 11, 2, 3, 45, 3 };

            int[] myKitty = myCat.Distinct().ToArray();
            //тут мы убираем повторяющиеся элементы массива
             int[] result = myCat.OrderBy(i => i).ToArray();
            //в новый массив получаем отсортированные элементы старого массива 
            // в порядке возрастания.

            //Array - это абсрактный класс, поэтому мы не можем создать материал 
            //этого класса. Это базовый класс для массива, поэтому он получает весь
            //функционал, находящийся в этом классе. 
            //если написать класс Array. поставить на него курсор, и нажать f12
            //то мы перейдем в метаданные, и сможем посмотреть: какие поля и методы
            // у этого класса имеются
            //данный класс имеет множество статических методов.
            //это означает, что в самом экземпляре этого класса myArray мы эти методы
            // вызывать не можем. Но если написать имя класса Array, и поставить точку
            // то мы получим доступ к этим методам
            Array.Sort(myKitty); //метод позволяет отсортировать элементы нашего массива.
            int res = Array.Find(myCat, i => i < 70); //в этом методе 2 параметра: массив и делегат
            //который будет обусловливать условие поиска. В данном случае - 
            //это поиск элемента меньше 70. Поместит он в переменную res первый элемент
            //соответствующий данному условию. 
            //еще есть метод FindLast, он начинает поиск элемента с конца
            //метод FindAll возвращает все элементы, соответсвующие параметрам
            //переменная должна быть соответствующей - тоже массивом.

            int res1 = Array.FindIndex(myCat, i => i == 77);
            //в этом методе ищем, под каким индексом находится опр число.

            Array.Reverse(myCat); 
            //элементы расположены в обратном порядке. 



        }
    }
}
